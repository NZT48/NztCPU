!Provera starta! 
l0: br (if !START then l0); 
!Citanje instrukcije!
PCout1, MOST1_2, ldMAR, incPC; 
l2: br (if hack then l2);
l3: eMAR, rdCPU, br (if !fcCPU then l3);
MDRout1, MOST1_3, ldIR1, ldGPRAR; 
br (if !gropr then l7);
stPRCOD, br lD8;
l7: br (if l1_noadr then l2B);
br (if l1_adr then l15);
PCout1, MOST1_2, ldMAR, incPC;
lA: br (if hack then lA);
lB: eMAR, rdCPU, br (if !fcCPU then lB);
MDRout1, ldIR2;
br (if !gradr then lF);
stPRADR, br lD8;
lF: br (if l2 then l2B);
PCout1, MOST1_2, ldMAR, incPC;
l11: br (if hack then l11);
l12: eMAR, rdCPU, br (if !fcCPU then l12);
MDRout1, ldIR3;
br (if l3_jump then l2B);
!Adresiranja!
l15: bradr
!Regdir!
br (if store then l2B);
GPRout1, ldBB, br l2B;
!Imm!
IRDAout3, MOST3_2, MOST2_1, ldBB, br l2B;
!Memdir!
IRDAout3, MOST3_2, ldMAR, br (if store then l2B);
br l23;
!Memind!
IRDAout3, MOST3_2, ldMAR;
l1C: br (if hack then l1C);
l1D: eMAR, rdCPU, br (if !fcCPU then l1D);
MDRout1, ldDWL, incMAR;
l1F: br (if hack then l1F);
l20: eMAR, rdCPU, br (if !fcCPU then l20);
MDRout1, ldDWH;
DWout2, ldMAR, br (if store then l2B);
!Citanje operanda!
l23: br (if hack then l23); 
l24: eMAR, rdCPU, br (if !fcCPU then l24);
l25: br (if hack then l25);
l26: MDRout1, ldDWL, incMAR;
l27: br (if hack then l27);
l28: eMAR, rdCPU, br (if !fcCPU then l28);
MDRout1, ldDWH;
DWout2, MOST2_1, ldBB;
!Izvrsavanje instrukcije!
l2B: bropr;
!Nop!
br lD8;
!Rti!
SPout2, ldMAR, incSP;
l2E: br (if hack then l2E); 
l2F: eMAR, rdCPU, br (if !fcCPU then l2F);
MDRout1, ldPSWL;
SPout2, ldMAR, incSP;
l32: br (if hack then l32);
l33: eMAR, rdCPU, br (if !fcCPU then l33);
MDRout1, ldPSWH;
!Rts!
SPout2, ldMAR, incSP;
l36: br (if hack then l36);
l37: eMAR, rdCPU, br (if !fcCPU then l37);
MDRout1, ldDWL;
SPout2, ldMAR, incSP;
l3A: br (if hack then l3A);
l3B: eMAR, rdCPU, br (if !fcCPU then l3B);
MDRout1, ldDWH;
DWout2, ldPC, br lD8;
!Asr, Lsr, Ror i Rorc!
shr, ldC;
ldN, ldZ, ldV, br lD8;
!Asl, Lsl, Rol i Rolc!
shl, ldC;
ldN, ldZ, ldV, br lD8;
!Intd!
clPSWI, br lD8;
!Inte!
stPSWI, br lD8;
!Stivtp!
ABout3, ldIVTP, br lD8;
!Stsp!
ABout3, ldSP, br lD8;
!Pushall!
decSP;
SPout2, ldMAR, decSP, PCHout3, mxMDR, ldMDR;
l48: br (if hack then l48);
l49: eMAR, eMDR, wrCPU, br (if !fcCPU then l49);
SPout2, ldMAR, decSP, PCLout3, mxMDR, ldMDR;
l4B: br (if hack then l4B);
l4C: eMAR, eMDR, wrCPU, br (if !fcCPU then l4C);
SPout2, ldMAR, decSP, PSWHout3, mxMDR, ldMDR;
l4E: br (if hack then l4E);
l4F: eMAR, eMDR, wrCPU, br (if !fcCPU then l4F);
SPout2, ldMAR, decSP, PSWLout3, mxMDR, ldMDR;
l51: br (if hack then l51);
l52: eMAR, eMDR, wrCPU, br (if !fcCPU then l52);
ABout3, Most3_2, ldAW;
SPout2, ldMar, decSP, AWHout3, mxMDR, ldMDR;
l55: br (if hack then l55);
l56: eMAR, eMDR, wrCPU, br (if !fcCPU then l56);
SPout2, ldMAR, decSP, AWout3, mxMDR, ldMDR;
l58: br (if hack then l58);
l59: eMAR, eMDR, wrCPU, br (if !fcCPU then l58);
IVTPout1, MOST1_2, ldAW;
SPout2, ldMAR, AWHout3, mxMDR, ldMDR, decSP;
l5C: br (if hack then l5C);
l5D: eMAR, eMDR, wrCPU, br (if !fcCPU then l5D);
SPout2, ldMAR, AWout3, mxMDR, ldMDR, decSP;
l5F: br (if hack then l5F);
l60: eMAR, eMDR, wrCPU, br (if !fcCPU then l60);
ABout3, MOST3_2, MOST2_1, ldBB;
ABout3, MOST3_2, xor, ALUout1, ldAB;
ABout3, MOST3_2, MOST2_1, ldGPRAR;
ABout3, inc, ALUout1, ldAB;
ABout3, inc, ALUout1, ldAB;
ABout3, inc, ALUout1, ldAB;
ABout3, inc, ALUout1, ldAB;
l68: ABout3, dec, ALUout1, ldAB;
GPRout1, MOST1_2, ldAW, incGPRAR;
SPout2, ldMAR, AWHout3, mxMDR, ldMDR, decSP;
l6B: br (if hack then l6B);
l6C: eMAR, eMDR, wrCPU, br (if !fcCPU then l6C);
SPout2, ldMAR, AWout3, mxMDR, ldMDR, decSP;
l6E: br (if hack then l6E);
l6F: eMAR, eMDR, wrCPU, br (if !fcCPU then l6F);
br (if !Z then l68);
BBout2, MOST2_1, ldAB, br lD8;
!Popall! 
ABout3, MOST3_2, MOST2_1, ldBB;
ABout3, MOST3_2, xor, ALUout1, ldAB;
ABout3, MOST3_2, MOST2_1, ldGPRAR;
ABout3, inc, ALUout1, ldAB;
ABout3, inc, ALUout1, ldAB;
ABout3, inc, ALUout1, ldAB;
ABout3, inc, ALUout1, ldAB;
decSP;
l7A: ABout3, dec, ALUout1, ldAB, incSP;
SPout2, ldMAR;
l7C: br (if hack then l7C);
l7D: eMAR, rdCPU, br (if !fcCPU then l7D);
MDRout1, ldDWL, incSP;
SPout2, ldMAR;
l80: br (if hack then l80);
l81: eMAR, rdCPU, br (if !fcCPU then l81);
MDRout1, ldDWH;
ABout3, MOST3_2, MOST2_1, ldGPRAR;
DWout2, MOST2_1, MOST1_3, wrGPR;
br (if !Z then l7A);
BBout2, MOST1_2, ldAB, incSP;
SPout2, ldMAR;
l88: br (if hack then l88);
l89: eMAR, rdCPU, br (if !fcCPU then l89);
MDRout1, ldDWL, incSP;
SPout2, ldMAR;
l8C: br (if hack then l8C);
l8D: eMAR, rdCPU, br (if !fcCPU then l8D);
MDRout1, ldDWH;
DWout2, MOST2_1, MOST1_3, ldIVTP;
incSP;
SPout2, ldMAR;
l92: br (if hack then l92);
l93: eMAR, rdCPU, br (if !fcCPU then l93);
MDRout1, ldDWL, incSP;
SPout2, ldMAR;
l96: br (if hack then l96);
l97: eMAR, rdCPU, br (if !fcCPU then l97);
MDRout1, ldDWH;
DWout2, MOST2_1, ldAB, br madrC1;
incSP;
SPout2, ldMAR;
l9C: br (if hack then l9C);
l9D: eMAR, rdCPU, br (if !fcCPU then l9D);
MDRout1, ldPSWL, incSP;
SPout2, ldMAR;
lA0: br (if hack then lA0);
lA1: eMAR, rdCPU, br (if !fcCPU then lA1);
MDRout1, ldPSWH;
incSP;
SPout2, ldMAR;
lA5: br (if hack then lA5);
lA6: eMAR, rdCPU, br (if !fcCPU then lA6);
MDRout1, ldDWL;
lA8: br (if hack then lA8);
lA9: eMAR, rdCPU, br (if !fcCPU then lA9);
MDRout1, ldDWH;
DWout2, ldPC, br lD8;
!Beql,..., Blsseu!
IRBRout3, br (if !brpom then lD8);
PCout1, IRPOMout3, ADDout2, ldPC, br lD8;
!Jmp!
IRJAout2, ldPC, br lD8;
!Jsr!
decSP;
SPout2, ldMAR, PCHout3, decSP, mxMDR, ldMDR;
lB1: br (if hack then lB1);
lB2: eMAR, eMDR, wrCPU, br (if !fcCPU then lB2);
SPout2, ldMAR, PCLout3, mxMDR, ldMDR;
lB4: br (if hack then lB4);
lB5: eMAR, eMDR, wrCPU, br (if !fcCPU then lB5);
IRJAout2, ldPC, br lD8;
!Ld!
BBout2, MOST2_1, ldAB;
ldN, ldZ, ldC, ldV, br lD8;
!Loadl!
ABout3, MOST3_2, ldAW;
AWHout3, MOST3_2, MOST2_1,  ldDWH;
BBout2, MOST2_1, ldDWL;
DWout2, MOST2_1, ldAB;
ldN, ldZ, ldC, ldV, br lD8;
!St!
br (if immed then lD8);
br (if regdir then lC8);
ABout3, mxMDR, ldMDR;
lC1: br (if hack then lC1);
lC2: eMAR, eMDR, wrCPU, br (if !fcCPU then lC2);
ABout3, MOST3_2, ldAW;
AWHout3, mxMDR, ldMDR, incMAR;
lC5: br (if hack then lC5);
lC6: eMAR, eMDR, wrCPU, br (if !fcCPU then lC6);
lC7: br lD8; 
lC8: ABout3, wrGPR, br lD8;
!Lea!
br (if immed then lD8);
IRJAout2, ldAW, br lD8;
!Add!
BBout2, ABout3, add, ALUout1, ldAB, ldC, ldV;
ldN, ldZ, br lD8;
!Sub!
BBout2, ABout3, sub, ALUout1, ldAB, ldC, ldV;
ldN, ldZ, br lD8;
!And!
BBout2, ABout3, and, ALUout1, ldAB;
ldN, ldZ, ldC, ldV, br lD8;
!Or!
BBout2, ABout3, or, ALUout1, ldAB;
ldN, ldZ, ldC, ldV, br lD8;
!Xor!
BBout2, ABout3, xor, ALUout1, ldAB;
ldN, ldZ, ldC, ldV, br lD8;
!Not!
ABout3, not, ALUout1, ldAB;
ldN, ldZ, ldC, ldV, br lD8;
!Halt!
clSTART, br l0;
!Opsluzivanje prekida!
lD8: br (if !prekid then l0); 
!Cuvanje konteksta procesora!
decSP;
SPout2, ldMAR, PCHout3, mxMDR, ldMDR;
lDB: br (if hack then lDB);
lDC: eMAR, eMDR, wrCPU, br (if !fcCPU then lDC);
decSP;
SPout2, ldMAR, PCLout3, mxMDR, ldMDR;
lDF: br (if hack then lDF);
lE0: eMAR, eMDR, wrCPU, br (if !fcCPU then lE0);
decSP;
SPout2, ldMAR, PSWHout3, mxMDR, ldMDR;
lE3: br (if hack then lE3);
lE4: eMAR, eMDR, wrCPU, br (if !fcCPU then lE4);
decSP;
SPout2, ldMAR, PSWLout3, mxMDR, ldMDR;
lE7: br (if hack then lE7);
lE8: eMAR, eMDR, wrCPU, br (if !fcCPU then lE8);
!Utvrdivanje broja ulaza!
br (if !PRINS then lEB);
IRPOMout3, ldBR, clPRINS, br lF4;
lEB: br (if !PRCOD then lED);
UINTout3, ldBR, clPRCOD, br lF4;
lED: br (if !PRADR then lEF);
UINTout3, ldBR, clPRADR, br lF4;
lEF: br (if !PRINM then lF1);
UINTout3, ldBR, clPRINM, br lF4;
lF1: br (if !printr then lF3);
UEXTout3, ldBR, clINTR, ldL, br lF4;
lF3: UINTout3, ldBR;
!Utvrdivanje adrese prekidne rutine!
lF4: IVTPout1, IVTDSPout3, ADDout2, ldMAR;
lF5: br (if hack then lF5);
lF6: eMAR, rdCPU, br (if !fcCPU then lF6);
MDRout1, ldDWL, incMAR;
lF8: br (if hack then lF8);
lF9: eMAR, rdCPU, br (if !fcCPU then lF9);
MDRout1, ldDWH;
DWout2,ldPC,clPSWI,clPSWT, br l0;
